import os
import sys
import shutil


def options(ctx):
        ctx.load('compiler_c compiler_cxx')
        ctx.add_option('--gc', action='store_true', default=False,
              help='generate CIC filter')
        ctx.add_option('--tb', action='store_true', default=False,
              help='builds test bench')

def configure(ctx):
        ctx.env.LIB_SDR=['yaml-cpp', 'sdr-yaml']
        ctx.env.LIBPATH_SDR=['/usr/lib', '/usr/local/lib', os.path.join(os.getcwd(), '.')]
        ctx.env.INCLUDES_SDR=['/usr/include', '/usr/local/include', os.path.join(os.getcwd(), '.')]

        ## define config file location
        ctx.env.CONFIG_FILE = ctx.path.abspath() + os.sep + 'config' + os.sep + 'sdr.yml'

        # copy over sdr configuration file
        ctx.exec_command('cp sdr.yml build/sdr.yml')
   
        # copy over the hard-coded configuration file
        ctx.exec_command('cp configuration.hpp build/configuration.hpp')
    
        # copy over sdr configuration file
        ctx.exec_command('cp stimulus.yml build/stimulus.yml')
    
        # copy over shared library
        ctx.exec_command('cp ../../build/libsdr-yaml.so libsdr-yaml.so')
        ctx.exec_command('cp ../../build/libsdr-yaml.so build/libsdr-yaml.so')

        ctx.load('compiler_c compiler_cxx')
        ctx.check(
                  features     = 'cxx cxxprogram',
                  use          = ['SDR'],
                  cflags       = ['-std=gnu++14','-Wall','-02'],
                 )


def build(bld):

   #bld(rule='cp ${SRC} ${TGT}', source='src/sdr.yml', target='sdr.yml')

   if bld.options.gc:

      print('GENERATING CIC FILTER ...')

      ## build code generator
      bld.add_group(
        bld(
           name     = 'cic_generator',
           features = 'cxx cxxprogram',
           cxxflags = ['-std=gnu++14','-Wall', '-W'],
           #includes = '/usr/local/include',
           source   = 'generate_cic.cpp',
           target   = 'cic_generator',
           rpath    = ['.'],
           use      = ['SDR']
           )
      )

      # generate code
      bld.add_group(
         bld(
            name     = 'generate_cic',
            rule     = bld.path.abspath() + '/build/cic_generator ${CONFIG_FILE}',
            use      = ['SDR'],
            source   = ['cic_generator'],
         )
      )


   cic_node = bld.bldnode.find_node('Cic.hpp')

   ## build primary program
   bld.add_group(
      bld(
         name     = 'test_bench',
         features = 'cxx cxxprogram',
         cxxflags = ['-std=gnu++14', '-Wall', '-W'],
         includes = [cic_node,'.'],
         source   = ['test_bench.cpp'],
         target   = 'test_rx_channel',
         use      = ['SDR'],
         lib      = ['yaml-cpp','systemc','sdr-yaml'],
         )
      )



