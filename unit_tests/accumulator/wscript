import os
import sys
import shutil

def options(opt):
        opt.load('compiler_c compiler_cxx')

def configure(cnf):
        cnf.load('compiler_c compiler_cxx')
        cnf.check(
                  features     = 'cxx cxxprogram',
                  libpath      = ['/usr/lib/','/usr/local/lib'],
                  lib          = ['yaml-cpp'],
                  cflags       = ['-std=gnu++0x','-Wall','-W','-02'],
                  uselib_store = 'M'
                 )

        ## define config file location
        cnf.env.CONFIG_FILE = cnf.path.abspath() + '/build/sdr.yml'
        

def build(bld):

      # copy over sdr configuration file
      bld.exec_command('cp sdr.yml build/sdr.yml')

      # copy over shared library
      bld(rule='cp ${SRC} ${TGT}', source='../../build/libsdr-yaml.so', target='libsdr-yaml.so'),

      ## build code generator
      bld.add_group(
         bld(
            name     = 'code_generator',
            features = 'cxx cxxprogram',
            cxxflags = ['-std=gnu++0x','-Wall', '-W'],
            source   = 'generate_header.cpp',
            target   = 'code_generator',
            lib      = ['yaml-cpp','sdr-yaml'],
            libpath  = ['.']
            )
         )

      ## generate code
      bld.add_group(
         bld(
            name     = 'generate_header',
            rule     = bld.path.abspath() + '/build/code_generator sdr.yml',
            source   = ['code_generator'],
         )
      )

      ## build primary program
      bld.add_group(
         bld(
            name     = 'test_bench',
            features = 'cxx cxxprogram',
            cxxflags = ['-std=gnu++0x','-Wall', '-W'],
            includes = '.',
            source   = 'test_bench.cpp',
            target   = 'accumulator_test',
            lib      = ['yaml-cpp','systemc'],
         )
      )

