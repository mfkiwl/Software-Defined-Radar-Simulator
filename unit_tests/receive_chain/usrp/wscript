import os
import sys
import shutil


def options(ctx):
        ctx.load('compiler_c compiler_cxx')
        ctx.add_option('--gc', action='store_true', default=False,
              help='generate CIC filter')
        ctx.add_option('--tb', action='store_true', default=False,
              help='builds test bench')

def configure(ctx):
        ctx.load('compiler_c compiler_cxx')
        ctx.check(
                  features     = 'cxx cxxprogram',
                  libpath      = ['/usr/lib/','/usr/local/lib'],
                  libs         = ['yaml-cpp'],
                  cflags       = ['-std=gnu++0x','-Wall','-02'],
                 )

        ## define config file location
        ctx.env.CONFIG_FILE = ctx.path.abspath() + os.sep + 'config' + os.sep + 'sdr.yml'

def build(ctx):

   #ctx(rule='cp ${SRC} ${TGT}', source='src/sdr.yml', target='sdr.yml')

   if ctx.options.gc:

      print('GENERATING CIC FILTER ...')

      ## build code generator
      ctx.add_group(
        ctx(
           name     = 'code_generator',
           features = 'cxx cxxprogram',
           cxxflags = ['-std=gnu++0x','-Wall', '-W'],
           includes = '/usr/local/include',
           source   = 'src/generate_header.cpp',
           target   = 'code_generator',
           lib      = ['yaml-cpp'],
           )
      )

      ### generate code
      ctx.add_group(
         ctx(
         name     = 'generate_header',
         rule     = ctx.path.abspath() + os.sep + 'build' + os.sep + 'code_generator ${CONFIG_FILE}',
         source   = ['code_generator'],
         )
      )

   ## build primary program
   ctx.add_group(
      ctx(
         name     = 'test_bench',
         features = 'cxx cxxprogram',
         cxxflags = ['-std=gnu++0x', '-Wall', '-W'],
         includes = ['.','src'],
         source   = 'src/test_bench.cpp',
         target   = 'test_rx_channel',
         lib      = ['yaml-cpp','systemc'],
         )
      )

